### YamlMime:ManagedReference
items:
- uid: StardewModdingAPI.IModRegistry
  commentId: T:StardewModdingAPI.IModRegistry
  id: IModRegistry
  parent: StardewModdingAPI
  children:
  - StardewModdingAPI.IModRegistry.Get(System.String)
  - StardewModdingAPI.IModRegistry.GetAll
  - StardewModdingAPI.IModRegistry.GetApi(System.String)
  - StardewModdingAPI.IModRegistry.GetApi``1(System.String)
  - StardewModdingAPI.IModRegistry.IsLoaded(System.String)
  langs:
  - csharp
  - vb
  name: IModRegistry
  nameWithType: IModRegistry
  fullName: StardewModdingAPI.IModRegistry
  type: Interface
  source:
    remote:
      path: src/SMAPI/IModRegistry.cs
      branch: develop
      repo: https://github.com/hawkfalcon/SMAPI.git
    id: IModRegistry
    path: ../IModRegistry.cs
    startLine: 5
  assemblies:
  - StardewModdingAPI
  namespace: StardewModdingAPI
  summary: Provides an API for fetching metadata about loaded mods.
  example: []
  syntax:
    content: 'public interface IModRegistry : IModLinked'
    content.vb: >-
      Public Interface IModRegistry
          Inherits IModLinked
  inheritedMembers:
  - StardewModdingAPI.IModLinked.ModID
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: StardewModdingAPI.IModRegistry.GetAll
  commentId: M:StardewModdingAPI.IModRegistry.GetAll
  id: GetAll
  parent: StardewModdingAPI.IModRegistry
  langs:
  - csharp
  - vb
  name: GetAll()
  nameWithType: IModRegistry.GetAll()
  fullName: StardewModdingAPI.IModRegistry.GetAll()
  type: Method
  source:
    remote:
      path: src/SMAPI/IModRegistry.cs
      branch: develop
      repo: https://github.com/hawkfalcon/SMAPI.git
    id: GetAll
    path: ../IModRegistry.cs
    startLine: 8
  assemblies:
  - StardewModdingAPI
  namespace: StardewModdingAPI
  summary: Get metadata for all loaded mods.
  example: []
  syntax:
    content: IEnumerable<IManifest> GetAll()
    return:
      type: System.Collections.Generic.IEnumerable{StardewModdingAPI.IManifest}
    content.vb: Function GetAll As IEnumerable(Of IManifest)
  overload: StardewModdingAPI.IModRegistry.GetAll*
- uid: StardewModdingAPI.IModRegistry.Get(System.String)
  commentId: M:StardewModdingAPI.IModRegistry.Get(System.String)
  id: Get(System.String)
  parent: StardewModdingAPI.IModRegistry
  langs:
  - csharp
  - vb
  name: Get(String)
  nameWithType: IModRegistry.Get(String)
  fullName: StardewModdingAPI.IModRegistry.Get(System.String)
  type: Method
  source:
    remote:
      path: src/SMAPI/IModRegistry.cs
      branch: develop
      repo: https://github.com/hawkfalcon/SMAPI.git
    id: Get
    path: ../IModRegistry.cs
    startLine: 13
  assemblies:
  - StardewModdingAPI
  namespace: StardewModdingAPI
  summary: Get metadata for a loaded mod.
  example: []
  syntax:
    content: IManifest Get(string uniqueID)
    parameters:
    - id: uniqueID
      type: System.String
      description: The mod&apos;s unique ID.
    return:
      type: StardewModdingAPI.IManifest
      description: Returns the matching mod&apos;s metadata, or <code>null</code> if not found.
    content.vb: Function Get(uniqueID As String) As IManifest
  overload: StardewModdingAPI.IModRegistry.Get*
- uid: StardewModdingAPI.IModRegistry.IsLoaded(System.String)
  commentId: M:StardewModdingAPI.IModRegistry.IsLoaded(System.String)
  id: IsLoaded(System.String)
  parent: StardewModdingAPI.IModRegistry
  langs:
  - csharp
  - vb
  name: IsLoaded(String)
  nameWithType: IModRegistry.IsLoaded(String)
  fullName: StardewModdingAPI.IModRegistry.IsLoaded(System.String)
  type: Method
  source:
    remote:
      path: src/SMAPI/IModRegistry.cs
      branch: develop
      repo: https://github.com/hawkfalcon/SMAPI.git
    id: IsLoaded
    path: ../IModRegistry.cs
    startLine: 17
  assemblies:
  - StardewModdingAPI
  namespace: StardewModdingAPI
  summary: Get whether a mod has been loaded.
  example: []
  syntax:
    content: bool IsLoaded(string uniqueID)
    parameters:
    - id: uniqueID
      type: System.String
      description: The mod&apos;s unique ID.
    return:
      type: System.Boolean
    content.vb: Function IsLoaded(uniqueID As String) As Boolean
  overload: StardewModdingAPI.IModRegistry.IsLoaded*
- uid: StardewModdingAPI.IModRegistry.GetApi(System.String)
  commentId: M:StardewModdingAPI.IModRegistry.GetApi(System.String)
  id: GetApi(System.String)
  parent: StardewModdingAPI.IModRegistry
  langs:
  - csharp
  - vb
  name: GetApi(String)
  nameWithType: IModRegistry.GetApi(String)
  fullName: StardewModdingAPI.IModRegistry.GetApi(System.String)
  type: Method
  source:
    remote:
      path: src/SMAPI/IModRegistry.cs
      branch: develop
      repo: https://github.com/hawkfalcon/SMAPI.git
    id: GetApi
    path: ../IModRegistry.cs
    startLine: 21
  assemblies:
  - StardewModdingAPI
  namespace: StardewModdingAPI
  summary: Get the API provided by a mod, or <code>null</code> if it has none. This signature requires using the <xref href="StardewModdingAPI.IModHelper.Reflection" data-throw-if-not-resolved="false"></xref> API to access the API&apos;s properties and methods.
  example: []
  syntax:
    content: object GetApi(string uniqueID)
    parameters:
    - id: uniqueID
      type: System.String
      description: The mod&apos;s unique ID.
    return:
      type: System.Object
    content.vb: Function GetApi(uniqueID As String) As Object
  overload: StardewModdingAPI.IModRegistry.GetApi*
- uid: StardewModdingAPI.IModRegistry.GetApi``1(System.String)
  commentId: M:StardewModdingAPI.IModRegistry.GetApi``1(System.String)
  id: GetApi``1(System.String)
  parent: StardewModdingAPI.IModRegistry
  langs:
  - csharp
  - vb
  name: GetApi<TInterface>(String)
  nameWithType: IModRegistry.GetApi<TInterface>(String)
  fullName: StardewModdingAPI.IModRegistry.GetApi<TInterface>(System.String)
  type: Method
  source:
    remote:
      path: src/SMAPI/IModRegistry.cs
      branch: develop
      repo: https://github.com/hawkfalcon/SMAPI.git
    id: GetApi
    path: ../IModRegistry.cs
    startLine: 26
  assemblies:
  - StardewModdingAPI
  namespace: StardewModdingAPI
  summary: Get the API provided by a mod, mapped to a given interface which specifies the expected properties and methods. If the mod has no API or it&apos;s not compatible with the given interface, get <code>null</code>.
  example: []
  syntax:
    content: >-
      TInterface GetApi<TInterface>(string uniqueID)
          where TInterface : class
    parameters:
    - id: uniqueID
      type: System.String
      description: The mod&apos;s unique ID.
    typeParameters:
    - id: TInterface
      description: The interface which matches the properties and methods you intend to access.
    return:
      type: '{TInterface}'
    content.vb: Function GetApi(Of TInterface As Class)(uniqueID As String) As TInterface
  overload: StardewModdingAPI.IModRegistry.GetApi*
  nameWithType.vb: IModRegistry.GetApi(Of TInterface)(String)
  fullName.vb: StardewModdingAPI.IModRegistry.GetApi(Of TInterface)(System.String)
  name.vb: GetApi(Of TInterface)(String)
references:
- uid: StardewModdingAPI
  commentId: N:StardewModdingAPI
  name: StardewModdingAPI
  nameWithType: StardewModdingAPI
  fullName: StardewModdingAPI
- uid: StardewModdingAPI.IModLinked.ModID
  commentId: P:StardewModdingAPI.IModLinked.ModID
  parent: StardewModdingAPI.IModLinked
  name: ModID
  nameWithType: IModLinked.ModID
  fullName: StardewModdingAPI.IModLinked.ModID
- uid: StardewModdingAPI.IModLinked
  commentId: T:StardewModdingAPI.IModLinked
  parent: StardewModdingAPI
  name: IModLinked
  nameWithType: IModLinked
  fullName: StardewModdingAPI.IModLinked
- uid: StardewModdingAPI.IModRegistry.GetAll*
  commentId: Overload:StardewModdingAPI.IModRegistry.GetAll
  name: GetAll
  nameWithType: IModRegistry.GetAll
  fullName: StardewModdingAPI.IModRegistry.GetAll
- uid: System.Collections.Generic.IEnumerable{StardewModdingAPI.IManifest}
  commentId: T:System.Collections.Generic.IEnumerable{StardewModdingAPI.IManifest}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IManifest>
  nameWithType: IEnumerable<IManifest>
  fullName: System.Collections.Generic.IEnumerable<StardewModdingAPI.IManifest>
  nameWithType.vb: IEnumerable(Of IManifest)
  fullName.vb: System.Collections.Generic.IEnumerable(Of StardewModdingAPI.IManifest)
  name.vb: IEnumerable(Of IManifest)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: StardewModdingAPI.IManifest
    name: IManifest
    nameWithType: IManifest
    fullName: StardewModdingAPI.IManifest
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: StardewModdingAPI.IManifest
    name: IManifest
    nameWithType: IManifest
    fullName: StardewModdingAPI.IManifest
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: StardewModdingAPI.IModRegistry.Get*
  commentId: Overload:StardewModdingAPI.IModRegistry.Get
  name: Get
  nameWithType: IModRegistry.Get
  fullName: StardewModdingAPI.IModRegistry.Get
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: StardewModdingAPI.IManifest
  commentId: T:StardewModdingAPI.IManifest
  parent: StardewModdingAPI
  name: IManifest
  nameWithType: IManifest
  fullName: StardewModdingAPI.IManifest
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: StardewModdingAPI.IModRegistry.IsLoaded*
  commentId: Overload:StardewModdingAPI.IModRegistry.IsLoaded
  name: IsLoaded
  nameWithType: IModRegistry.IsLoaded
  fullName: StardewModdingAPI.IModRegistry.IsLoaded
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: StardewModdingAPI.IModHelper.Reflection
  commentId: P:StardewModdingAPI.IModHelper.Reflection
  isExternal: true
- uid: StardewModdingAPI.IModRegistry.GetApi*
  commentId: Overload:StardewModdingAPI.IModRegistry.GetApi
  name: GetApi
  nameWithType: IModRegistry.GetApi
  fullName: StardewModdingAPI.IModRegistry.GetApi
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: '{TInterface}'
  commentId: '!:TInterface'
  definition: TInterface
  name: TInterface
  nameWithType: TInterface
  fullName: TInterface
- uid: TInterface
  commentId: '!:TInterface'
  name: TInterface
  nameWithType: TInterface
  fullName: TInterface
