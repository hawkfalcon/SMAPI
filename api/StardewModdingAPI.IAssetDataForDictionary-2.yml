### YamlMime:ManagedReference
items:
- uid: StardewModdingAPI.IAssetDataForDictionary`2
  commentId: T:StardewModdingAPI.IAssetDataForDictionary`2
  id: IAssetDataForDictionary`2
  parent: StardewModdingAPI
  children:
  - StardewModdingAPI.IAssetDataForDictionary`2.Set(`0,`1)
  - StardewModdingAPI.IAssetDataForDictionary`2.Set(`0,System.Func{`1,`1})
  - StardewModdingAPI.IAssetDataForDictionary`2.Set(System.Func{`0,`1,`1})
  langs:
  - csharp
  - vb
  name: IAssetDataForDictionary<TKey, TValue>
  nameWithType: IAssetDataForDictionary<TKey, TValue>
  fullName: StardewModdingAPI.IAssetDataForDictionary<TKey, TValue>
  type: Interface
  source:
    remote:
      path: src/SMAPI/IAssetDataForDictionary.cs
      branch: develop
      repo: https://github.com/hawkfalcon/SMAPI.git
    id: IAssetDataForDictionary
    path: ../IAssetDataForDictionary.cs
    startLine: 6
  assemblies:
  - StardewModdingAPI
  namespace: StardewModdingAPI
  summary: Encapsulates access and changes to dictionary content being read from a data file.
  example: []
  syntax:
    content: 'public interface IAssetDataForDictionary<TKey, TValue> : IAssetData<IDictionary<TKey, TValue>>, IAssetInfo'
    typeParameters:
    - id: TKey
    - id: TValue
    content.vb: >-
      Public Interface IAssetDataForDictionary(Of TKey, TValue)
          Inherits IAssetData(Of IDictionary(Of TKey, TValue))
  inheritedMembers:
  - StardewModdingAPI.IAssetData{System.Collections.Generic.IDictionary{{TKey},{TValue}}}.Data
  - StardewModdingAPI.IAssetData{System.Collections.Generic.IDictionary{{TKey},{TValue}}}.ReplaceWith(System.Collections.Generic.IDictionary{{TKey},{TValue}})
  - StardewModdingAPI.IAssetInfo.Locale
  - StardewModdingAPI.IAssetInfo.AssetName
  - StardewModdingAPI.IAssetInfo.DataType
  - StardewModdingAPI.IAssetInfo.AssetNameEquals(System.String)
  nameWithType.vb: IAssetDataForDictionary(Of TKey, TValue)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: StardewModdingAPI.IAssetDataForDictionary(Of TKey, TValue)
  name.vb: IAssetDataForDictionary(Of TKey, TValue)
- uid: StardewModdingAPI.IAssetDataForDictionary`2.Set(`0,`1)
  commentId: M:StardewModdingAPI.IAssetDataForDictionary`2.Set(`0,`1)
  id: Set(`0,`1)
  parent: StardewModdingAPI.IAssetDataForDictionary`2
  langs:
  - csharp
  - vb
  name: Set(TKey, TValue)
  nameWithType: IAssetDataForDictionary<TKey, TValue>.Set(TKey, TValue)
  fullName: StardewModdingAPI.IAssetDataForDictionary<TKey, TValue>.Set(TKey, TValue)
  type: Method
  source:
    remote:
      path: src/SMAPI/IAssetDataForDictionary.cs
      branch: develop
      repo: https://github.com/hawkfalcon/SMAPI.git
    id: Set
    path: ../IAssetDataForDictionary.cs
    startLine: 14
  assemblies:
  - StardewModdingAPI
  namespace: StardewModdingAPI
  summary: Add or replace an entry in the dictionary.
  example: []
  syntax:
    content: void Set(TKey key, TValue value)
    parameters:
    - id: key
      type: '{TKey}'
      description: The entry key.
    - id: value
      type: '{TValue}'
      description: The entry value.
    content.vb: Sub Set(key As TKey, value As TValue)
  overload: StardewModdingAPI.IAssetDataForDictionary`2.Set*
  nameWithType.vb: IAssetDataForDictionary(Of TKey, TValue).Set(TKey, TValue)
  fullName.vb: StardewModdingAPI.IAssetDataForDictionary(Of TKey, TValue).Set(TKey, TValue)
- uid: StardewModdingAPI.IAssetDataForDictionary`2.Set(`0,System.Func{`1,`1})
  commentId: M:StardewModdingAPI.IAssetDataForDictionary`2.Set(`0,System.Func{`1,`1})
  id: Set(`0,System.Func{`1,`1})
  parent: StardewModdingAPI.IAssetDataForDictionary`2
  langs:
  - csharp
  - vb
  name: Set(TKey, Func<TValue, TValue>)
  nameWithType: IAssetDataForDictionary<TKey, TValue>.Set(TKey, Func<TValue, TValue>)
  fullName: StardewModdingAPI.IAssetDataForDictionary<TKey, TValue>.Set(TKey, System.Func<TValue, TValue>)
  type: Method
  source:
    remote:
      path: src/SMAPI/IAssetDataForDictionary.cs
      branch: develop
      repo: https://github.com/hawkfalcon/SMAPI.git
    id: Set
    path: ../IAssetDataForDictionary.cs
    startLine: 19
  assemblies:
  - StardewModdingAPI
  namespace: StardewModdingAPI
  summary: Add or replace an entry in the dictionary.
  example: []
  syntax:
    content: void Set(TKey key, Func<TValue, TValue> value)
    parameters:
    - id: key
      type: '{TKey}'
      description: The entry key.
    - id: value
      type: System.Func{{TValue},{TValue}}
      description: A callback which accepts the current value and returns the new value.
    content.vb: Sub Set(key As TKey, value As Func(Of TValue, TValue))
  overload: StardewModdingAPI.IAssetDataForDictionary`2.Set*
  nameWithType.vb: IAssetDataForDictionary(Of TKey, TValue).Set(TKey, Func(Of TValue, TValue))
  fullName.vb: StardewModdingAPI.IAssetDataForDictionary(Of TKey, TValue).Set(TKey, System.Func(Of TValue, TValue))
  name.vb: Set(TKey, Func(Of TValue, TValue))
- uid: StardewModdingAPI.IAssetDataForDictionary`2.Set(System.Func{`0,`1,`1})
  commentId: M:StardewModdingAPI.IAssetDataForDictionary`2.Set(System.Func{`0,`1,`1})
  id: Set(System.Func{`0,`1,`1})
  parent: StardewModdingAPI.IAssetDataForDictionary`2
  langs:
  - csharp
  - vb
  name: Set(Func<TKey, TValue, TValue>)
  nameWithType: IAssetDataForDictionary<TKey, TValue>.Set(Func<TKey, TValue, TValue>)
  fullName: StardewModdingAPI.IAssetDataForDictionary<TKey, TValue>.Set(System.Func<TKey, TValue, TValue>)
  type: Method
  source:
    remote:
      path: src/SMAPI/IAssetDataForDictionary.cs
      branch: develop
      repo: https://github.com/hawkfalcon/SMAPI.git
    id: Set
    path: ../IAssetDataForDictionary.cs
    startLine: 23
  assemblies:
  - StardewModdingAPI
  namespace: StardewModdingAPI
  summary: Dynamically replace values in the dictionary.
  example: []
  syntax:
    content: void Set(Func<TKey, TValue, TValue> replacer)
    parameters:
    - id: replacer
      type: System.Func{{TKey},{TValue},{TValue}}
      description: A lambda which takes the current key and value for an entry, and returns the new value.
    content.vb: Sub Set(replacer As Func(Of TKey, TValue, TValue))
  overload: StardewModdingAPI.IAssetDataForDictionary`2.Set*
  nameWithType.vb: IAssetDataForDictionary(Of TKey, TValue).Set(Func(Of TKey, TValue, TValue))
  fullName.vb: StardewModdingAPI.IAssetDataForDictionary(Of TKey, TValue).Set(System.Func(Of TKey, TValue, TValue))
  name.vb: Set(Func(Of TKey, TValue, TValue))
references:
- uid: StardewModdingAPI
  commentId: N:StardewModdingAPI
  name: StardewModdingAPI
  nameWithType: StardewModdingAPI
  fullName: StardewModdingAPI
- uid: StardewModdingAPI.IAssetData{System.Collections.Generic.IDictionary{{TKey},{TValue}}}.Data
  commentId: P:StardewModdingAPI.IAssetData{System.Collections.Generic.IDictionary{`0,`1}}.Data
  parent: StardewModdingAPI.IAssetData{System.Collections.Generic.IDictionary{{TKey},{TValue}}}
  definition: StardewModdingAPI.IAssetData`1.Data
  name: Data
  nameWithType: IAssetData<IDictionary<TKey, TValue>>.Data
  fullName: StardewModdingAPI.IAssetData<System.Collections.Generic.IDictionary<TKey, TValue>>.Data
  nameWithType.vb: IAssetData(Of IDictionary(Of TKey, TValue)).Data
  fullName.vb: StardewModdingAPI.IAssetData(Of System.Collections.Generic.IDictionary(Of TKey, TValue)).Data
- uid: StardewModdingAPI.IAssetData{System.Collections.Generic.IDictionary{{TKey},{TValue}}}.ReplaceWith(System.Collections.Generic.IDictionary{{TKey},{TValue}})
  commentId: M:StardewModdingAPI.IAssetData{System.Collections.Generic.IDictionary{`0,`1}}.ReplaceWith(System.Collections.Generic.IDictionary{`0,`1})
  parent: StardewModdingAPI.IAssetData{System.Collections.Generic.IDictionary{{TKey},{TValue}}}
  definition: StardewModdingAPI.IAssetData`1.ReplaceWith(`0)
  name: ReplaceWith(IDictionary<TKey, TValue>)
  nameWithType: IAssetData<IDictionary<TKey, TValue>>.ReplaceWith(IDictionary<TKey, TValue>)
  fullName: StardewModdingAPI.IAssetData<System.Collections.Generic.IDictionary<TKey, TValue>>.ReplaceWith(System.Collections.Generic.IDictionary<TKey, TValue>)
  nameWithType.vb: IAssetData(Of IDictionary(Of TKey, TValue)).ReplaceWith(IDictionary(Of TKey, TValue))
  fullName.vb: StardewModdingAPI.IAssetData(Of System.Collections.Generic.IDictionary(Of TKey, TValue)).ReplaceWith(System.Collections.Generic.IDictionary(Of TKey, TValue))
  name.vb: ReplaceWith(IDictionary(Of TKey, TValue))
  spec.csharp:
  - uid: StardewModdingAPI.IAssetData`1.ReplaceWith(`0)
    name: ReplaceWith
    nameWithType: IAssetData<IDictionary<TKey, TValue>>.ReplaceWith
    fullName: StardewModdingAPI.IAssetData<System.Collections.Generic.IDictionary<TKey, TValue>>.ReplaceWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: StardewModdingAPI.IAssetData`1.ReplaceWith(`0)
    name: ReplaceWith
    nameWithType: IAssetData(Of IDictionary(Of TKey, TValue)).ReplaceWith
    fullName: StardewModdingAPI.IAssetData(Of System.Collections.Generic.IDictionary(Of TKey, TValue)).ReplaceWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: StardewModdingAPI.IAssetInfo.Locale
  commentId: P:StardewModdingAPI.IAssetInfo.Locale
  parent: StardewModdingAPI.IAssetInfo
  name: Locale
  nameWithType: IAssetInfo.Locale
  fullName: StardewModdingAPI.IAssetInfo.Locale
- uid: StardewModdingAPI.IAssetInfo.AssetName
  commentId: P:StardewModdingAPI.IAssetInfo.AssetName
  parent: StardewModdingAPI.IAssetInfo
  name: AssetName
  nameWithType: IAssetInfo.AssetName
  fullName: StardewModdingAPI.IAssetInfo.AssetName
- uid: StardewModdingAPI.IAssetInfo.DataType
  commentId: P:StardewModdingAPI.IAssetInfo.DataType
  parent: StardewModdingAPI.IAssetInfo
  name: DataType
  nameWithType: IAssetInfo.DataType
  fullName: StardewModdingAPI.IAssetInfo.DataType
- uid: StardewModdingAPI.IAssetInfo.AssetNameEquals(System.String)
  commentId: M:StardewModdingAPI.IAssetInfo.AssetNameEquals(System.String)
  parent: StardewModdingAPI.IAssetInfo
  isExternal: true
  name: AssetNameEquals(String)
  nameWithType: IAssetInfo.AssetNameEquals(String)
  fullName: StardewModdingAPI.IAssetInfo.AssetNameEquals(System.String)
  spec.csharp:
  - uid: StardewModdingAPI.IAssetInfo.AssetNameEquals(System.String)
    name: AssetNameEquals
    nameWithType: IAssetInfo.AssetNameEquals
    fullName: StardewModdingAPI.IAssetInfo.AssetNameEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: StardewModdingAPI.IAssetInfo.AssetNameEquals(System.String)
    name: AssetNameEquals
    nameWithType: IAssetInfo.AssetNameEquals
    fullName: StardewModdingAPI.IAssetInfo.AssetNameEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: StardewModdingAPI.IAssetData`1.Data
  commentId: P:StardewModdingAPI.IAssetData`1.Data
  name: Data
  nameWithType: IAssetData<TValue>.Data
  fullName: StardewModdingAPI.IAssetData<TValue>.Data
  nameWithType.vb: IAssetData(Of TValue).Data
  fullName.vb: StardewModdingAPI.IAssetData(Of TValue).Data
- uid: StardewModdingAPI.IAssetData{System.Collections.Generic.IDictionary{{TKey},{TValue}}}
  commentId: T:StardewModdingAPI.IAssetData{System.Collections.Generic.IDictionary{`0,`1}}
  parent: StardewModdingAPI
  definition: StardewModdingAPI.IAssetData`1
  name: IAssetData<IDictionary<TKey, TValue>>
  nameWithType: IAssetData<IDictionary<TKey, TValue>>
  fullName: StardewModdingAPI.IAssetData<System.Collections.Generic.IDictionary<TKey, TValue>>
  nameWithType.vb: IAssetData(Of IDictionary(Of TKey, TValue))
  fullName.vb: StardewModdingAPI.IAssetData(Of System.Collections.Generic.IDictionary(Of TKey, TValue))
  name.vb: IAssetData(Of IDictionary(Of TKey, TValue))
  spec.csharp:
  - uid: StardewModdingAPI.IAssetData`1
    name: IAssetData
    nameWithType: IAssetData
    fullName: StardewModdingAPI.IAssetData
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: StardewModdingAPI.IAssetData`1
    name: IAssetData
    nameWithType: IAssetData
    fullName: StardewModdingAPI.IAssetData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: StardewModdingAPI.IAssetData`1.ReplaceWith(`0)
  commentId: M:StardewModdingAPI.IAssetData`1.ReplaceWith(`0)
  name: ReplaceWith(TValue)
  nameWithType: IAssetData<TValue>.ReplaceWith(TValue)
  fullName: StardewModdingAPI.IAssetData<TValue>.ReplaceWith(TValue)
  nameWithType.vb: IAssetData(Of TValue).ReplaceWith(TValue)
  fullName.vb: StardewModdingAPI.IAssetData(Of TValue).ReplaceWith(TValue)
  spec.csharp:
  - uid: StardewModdingAPI.IAssetData`1.ReplaceWith(`0)
    name: ReplaceWith
    nameWithType: IAssetData<TValue>.ReplaceWith
    fullName: StardewModdingAPI.IAssetData<TValue>.ReplaceWith
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: StardewModdingAPI.IAssetData`1.ReplaceWith(`0)
    name: ReplaceWith
    nameWithType: IAssetData(Of TValue).ReplaceWith
    fullName: StardewModdingAPI.IAssetData(Of TValue).ReplaceWith
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: StardewModdingAPI.IAssetInfo
  commentId: T:StardewModdingAPI.IAssetInfo
  parent: StardewModdingAPI
  name: IAssetInfo
  nameWithType: IAssetInfo
  fullName: StardewModdingAPI.IAssetInfo
- uid: StardewModdingAPI.IAssetData`1
  commentId: T:StardewModdingAPI.IAssetData`1
  name: IAssetData<TValue>
  nameWithType: IAssetData<TValue>
  fullName: StardewModdingAPI.IAssetData<TValue>
  nameWithType.vb: IAssetData(Of TValue)
  fullName.vb: StardewModdingAPI.IAssetData(Of TValue)
  name.vb: IAssetData(Of TValue)
  spec.csharp:
  - uid: StardewModdingAPI.IAssetData`1
    name: IAssetData
    nameWithType: IAssetData
    fullName: StardewModdingAPI.IAssetData
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: StardewModdingAPI.IAssetData`1
    name: IAssetData
    nameWithType: IAssetData
    fullName: StardewModdingAPI.IAssetData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: StardewModdingAPI.IAssetDataForDictionary`2.Set*
  commentId: Overload:StardewModdingAPI.IAssetDataForDictionary`2.Set
  name: Set
  nameWithType: IAssetDataForDictionary<TKey, TValue>.Set
  fullName: StardewModdingAPI.IAssetDataForDictionary<TKey, TValue>.Set
  nameWithType.vb: IAssetDataForDictionary(Of TKey, TValue).Set
  fullName.vb: StardewModdingAPI.IAssetDataForDictionary(Of TKey, TValue).Set
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Func{{TValue},{TValue}}
  commentId: T:System.Func{`1,`1}
  parent: System
  definition: System.Func`2
  name: Func<TValue, TValue>
  nameWithType: Func<TValue, TValue>
  fullName: System.Func<TValue, TValue>
  nameWithType.vb: Func(Of TValue, TValue)
  fullName.vb: System.Func(Of TValue, TValue)
  name.vb: Func(Of TValue, TValue)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Func{{TKey},{TValue},{TValue}}
  commentId: T:System.Func{`0,`1,`1}
  parent: System
  definition: System.Func`3
  name: Func<TKey, TValue, TValue>
  nameWithType: Func<TKey, TValue, TValue>
  fullName: System.Func<TKey, TValue, TValue>
  nameWithType.vb: Func(Of TKey, TValue, TValue)
  fullName.vb: System.Func(Of TKey, TValue, TValue)
  name.vb: Func(Of TKey, TValue, TValue)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
